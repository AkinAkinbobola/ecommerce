generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  username     String
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  shoppingCart ShoppingCart?
  orders       Order[]
}

model Product {
  id                String             @id @default(uuid())
  name              String
  description       String?
  price             Decimal
  stockQuantity     Int
  category          Category
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  orderItems        OrderItem[]
  shoppingCartItems ShoppingCartItem[]
}

enum Category {
  Electronics
  Fashion
  Food
  Beverages
  DIY_and_hardware
  Furniture
  Media
  Beauty_and_personal_care
  Tobacco
  Toys_and_hobbies
}

model ShoppingCart {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  shoppingCartItems ShoppingCartItem[]
}

model ShoppingCartItem {
  id           String       @id @default(uuid())
  shoppingCart ShoppingCart @relation(fields: [cartId], references: [id])
  cartId       String
  product      Product      @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
}

model Order {
  id          String      @id @default(uuid())
  totalAmount Decimal
  status      OrderStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  orderItems  OrderItem[]
  payments    Payment[]
}

enum OrderStatus {
  Pending
  Completed
  Shipped
  Delivered
  Cancelled
}

model OrderItem {
  id        String  @id @default(uuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
}

model Payment {
  id            String        @id @default(uuid())
  amount        Decimal
  paymentMethod String
  paymentStatus PaymentStatus
  transactionId String
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum PaymentStatus {
  Pending
  Completed
  Failed
  Refunded
}
